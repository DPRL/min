8/8/2012

Author: Christopher Sasarak - cms5347@rit.edu

DEFINITIONS:

Object/Primitive: A single continuous stroke or image on the canvas.
Symbol: A recognizable entity on screen. Is composed of one or more objects/primitives.

SYSTEM DESCRIPTION:

INTERFACE:

Min's major component is the drawing canvas. This canvas is where images can be added, strokes
drawn, and where OCR overlays appear. A toolbar at the top allows the user to switch between
different modes: pen mode, rectangle (symbol) selection mode, and stroke selection mode. The folder
button allows users to upload images, though this currently only works on desktop machines and
machines including the window.FileReader object.

At the right side of the top bar are the chalk and OCR check buttons. Checking 'Chalk' displays
drawings made by the pen or images uploaded to the canvas. Checking OCR displays the symbols that
are recognized by Min.

The far right bar includes features for math search. Pressing the âŠ• (circled plus) button will align
the symbols and also put the LaTeX string version of the symbols on the canvas into the search query
bar. The drop-down menu can be used to select a search engine. Pressing enter in the search box will
open a search in a new window.


EDITOR MODES:

As Min is used, it switches between different modes. A list of modes is located in
Editor.Events.js. The primary purpose of these is to direct the editor on what to do when onMouseDown,
onMouseMove, and onMouseUp events are fired.

PEN STROKES:

It is possible to draw directly on a canvas, but the canvas element in min is used only for drawing
the selection trail in stroke selection mode. Strokes drawn in pen mode are displayed as SVG element
elements with a nested polyline (a list of points) displayed on the canvas element. The main benefit
of this is that a canvas element needs to updated manually, while changing attributes of an SVG
element or its children will update them automatically by the browser.

A stroke is drawn across calls to three event handlers located in Editor.Events.js: onMouseDown,
onMouseMove, and onMouseUp.  onMouseDown creates the stroke segment object when the mouse is clicked
in Pen mode and switches the editor into StrokeSelecting mode. As the mouse moves, different canvas
points are added to the polyline object inside the SVG stroke element. When onMouseDown fires, the
SVG element is sent to the Classifier.

CLASSIFICATION/RECOGNITION:

After an object is added to the canvas, (except SymbolSegments i.e. typed symbols) it is enqueued to
be classified using the RecognitionManager.enqueueSegment() function.  The Classifier's classify()
function can then be run which will sort the enqueued segments based on which server they need to be
sent to for recognition. The server list is kept in Editor.Constants.js and each object type should
store a reference to the one that it needs.

Classification requests are sent using AJAX. The requests are XML, each object is responsible for
generating an XML representation of itself by defining a toXML() function. Responses from the
classification servers come back as XML and are then used by Min to match the SVG objects to their
OCR equivalents.

Each object has a unique object ID as well as a set ID that can be shared between objects on
screen. This is so that each stroke can be referenced individually, but also grouped together as in
the horizontal and vertical stroke in the + (plus) symbol. Objects can manually be grouped together
by selecting them and clicking/touching and holding.

IMAGEBLOBS are classified somewhat differently then pen strokes. They have to be broken up into
connected components and then classified. When an ImageBlob is sent to the classifier, it is
returned as multiple connected components and multiple recognitions which are then added to the
canvas.

CANVAS OBJECT LAYOUT:

When an ImageBlob or PenStroke is drawn on the canvas, there are actually two separate elements
shown visually. The first is the blob or stroke which are both SVG objects. Adjacent to them in the
document and displayed on top of them on the canvas is the OCR overlay. The OCR overlay is a DIV
with a translucent blue or (depending on the editor state) background which is displayed over the
blob or penstroke. Its innerHTML is the classification for that symbol. The overlay is added by the
RenderManager in the render_set_field() function of RenderManager.js.

SymbolSegments is similar but in place of an SVG element there is one div for the blue and another
which has the SymbolSegment as its innerHTML.

CORRECTION MENU:

The CorrectionMenu is displayed when the user clicks/touches on a symbol or symbol set and
holds. The menu allows the user to select a different recognition result for a recognized symbol.

The CorrectionMenu and its functions are defined in CorrectionMenu.js. The CorrectionMenu is
populated by a parser in CorrectionMenu.SymbolTree.js which reads an XML file defining the symbols
that appear in the menu as well as categories in the menu. the parseXML() function in
CorrectionMenu.SymbolTree.js parses an XML representation of the CorrectionMenu and returns an
object tree representing it.

The XML tree is loaded with Min is first started via an AJAX request. This can request either a
file local to Min or on a remote server. As of this writing, example_tree_icdar.xml in the pen_entry
directory is used.

UTILS:

Many functions in Min make use of the Vector2 object, which is like a Python 2-tuple. Most often
they are used to represent x,y coordinates. This file also includes many functions for doing math on
Vector2s.

ACTIONS:

Many operations that users can perform using Min can be encapsulated in an action object. Action is
an interface defined in Action.js which includes the Undo() and Apply() methods. Individual kinds of
actions are defined in the Action.*.js files. Each of these individual action types implement the
Action.js interface, but take different parameters in their constructors to make the action.
